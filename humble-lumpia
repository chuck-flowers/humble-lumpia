#!/bin/env sh

# XDG polyfills
test -z "$XDG_CACHE_HOME" && XDG_CACHE_HOME="$HOME/.cache";

# URLs
RELEASES_URL='https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases';

# Directories
HUMBLE_LUMPIA_CACHE_DIR="$XDG_CACHE_HOME/humble-lumpia";
HUMBLE_LUMPIA_SHARE_DIR="/usr/share/humble-lumpia";
HUMBLE_LUMPIA_TMP_DIR="/tmp/humble-lumpia";
STEAM_COMPAT_TOOLS="$HOME/.steam/root/compatibilitytools.d";

# Files
HELP_FILE="$HUMBLE_LUMPIA_SHARE_DIR/help"
RELEASES_FILE="$HUMBLE_LUMPIA_CACHE_DIR/releases";

updateReleaseData() {
    mkdir -p "$HUMBLE_LUMPIA_CACHE_DIR" 2>/dev/null
    touch "$RELEASES_FILE";
    curl -s "$RELEASES_URL" > "$RELEASES_FILE";
}

getAllReleasesData() {
	# If there is no releases file, download it
	test -e "$RELEASES_FILE" || updateReleaseData;

    if test -e "$RELEASES_FILE"; then
		jq '[.[] | { name: .tag_name, published_at, url: .assets[] | select(.content_type == "application/gzip") | .url }] | sort_by(.published_at)' \
			< "$RELEASES_FILE";
    fi
}

getReleaseData() {
    if test "$1" = "latest"; then
        getAllReleasesData | jq '. | last';
    else
        getAllReleasesData | jq ".[] | select(.name == \"$1\")"
    fi;
}

lsReleases() {
    getAllReleasesData | jq -r '.[].name | select(. != "")';
}

lsInstalled() {
    find "$STEAM_COMPAT_TOOLS"/* -maxdepth 0 -printf '%f\n';
}

downloadRelease() {
    printf "Downloading... ";
    curl -sL "$1" -o "$2";
    echo "Complete!";
}

extractIntoSteam() {
    printf "Extracting... ";
    mkdir -p "$STEAM_COMPAT_TOOLS" && tar -xf "$1" -C "$STEAM_COMPAT_TOOLS" 
    echo "Complete!";
}

installRelease() {
    RELEASE_DATA=$(getReleaseData "$1");
    ASSET_URL=$(echo "$RELEASE_DATA" | jq -r '.url');
    DOWNLOAD_URL=$(curl -sL "$ASSET_URL" | jq -r '.browser_download_url');
    DOWNLOAD_NAME=$(echo "$RELEASE_DATA" | jq -r '.name');
    DOWNLOAD_PATH="$HUMBLE_LUMPIA_TMP_DIR/$DOWNLOAD_NAME";

    mkdir -p "$HUMBLE_LUMPIA_TMP_DIR" \
		&& downloadRelease "$DOWNLOAD_URL" "$DOWNLOAD_PATH" \
		&& extractIntoSteam "$DOWNLOAD_PATH" \
		&& echo "Sucessfully installed '$DOWNLOAD_NAME'";
}

removeRelease() {
    if test -e "$STEAM_COMPAT_TOOLS/$1"; then
        rm -rf "${STEAM_COMPAT_TOOLS:?}/$1";
    else
        echo "The version '$1' is not installed";
    fi;
}

showHelp() {
    cat $HELP_FILE;
}

case $1 in
    "update")
        updateReleaseData;
    ;;
    "ls")
        if test "$2" = "--installed"; then
            lsInstalled
        else
            lsReleases
        fi;
    ;;
    "install")
        installRelease "$2"
    ;;
    "rm")
        removeRelease "$2"
    ;;
    "help"|"--help")
        showHelp;
    ;;
    *)
        echo "Unrecognized command '$1'";
        showHelp;
    ;;
esac
