#!/bin/env sh

TMP_PATH='/tmp/humble-lumpia';
RELEASES_URL='https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases';
STEAM_COMPAT_TOOLS="$HOME/.steam/root/compatibilitytools.d";

if [ -z "$XDG_CACHE_HOME" ]; then
	RELEASE_CACHEDIR="$HOME/.cache/humble-lumpia";
else
	RELEASE_CACHEDIR="$XDG_CACHE_HOME/humble-lumpia";
fi

RELEASES_FILE="$RELEASE_CACHEDIR/releases";

updateReleaseData() {
    mkdir -p "$RELEASE_CACHEDIR" 2>/dev/null
    touch "$RELEASES_FILE";
    curl -s "$RELEASES_URL" > "$RELEASES_FILE";
}

getAllReleasesData() {
    if test ! -e "$RELEASES_FILE"; then
        updateReleaseData
    fi

    if test -e "$RELEASES_FILE"; then
    jq '[.[] | { name: .tag_name, published_at, url: .assets[] | select(.content_type == "application/gzip") | .url }] | sort_by(.published_at)' \
        < "$RELEASES_FILE";
    fi
}

getReleaseData() {
    if test "$1" = "latest"; then
        getAllReleasesData | jq '. | last';
    else
        getAllReleasesData | jq ".[] | select(.name == \"$1\")"
    fi;
}

lsReleases() {
    getAllReleasesData | jq -r '.[].name | select(. != "")';
}

lsInstalled() {
    find "$STEAM_COMPAT_TOOLS"/* -maxdepth 0 -printf '%f\n';
}

downloadRelease() {
    printf "Downloading... ";
    curl -sL "$1" -o "$2";
    echo "Complete!";
}

extractIntoSteam() {
    printf "Extracting... ";
    mkdir -p "$STEAM_COMPAT_TOOLS" && tar -xf "$1" -C ~/.steam/root/compatibilitytools.d/
    echo "Complete!";
}

installRelease() {
    RELEASE_DATA=$(getReleaseData "$1");
    ASSET_URL=$(echo "$RELEASE_DATA" | jq -r '.url');
    DOWNLOAD_URL=$(curl -sL "$ASSET_URL" | jq -r '.browser_download_url');
    DOWNLOAD_NAME=$(echo "$RELEASE_DATA" | jq -r '.name');
    DOWNLOAD_PATH="$TMP_PATH/$DOWNLOAD_NAME";

    mkdir -p "$TMP_PATH" && downloadRelease "$DOWNLOAD_URL" "$DOWNLOAD_PATH" && extractIntoSteam "$DOWNLOAD_PATH";
}

removeRelease() {
    if test -e "$STEAM_COMPAT_TOOLS/$1"; then
        rm -rf "${STEAM_COMPAT_TOOLS:?}/$1";
    else
        echo "The version '$1' is not installed";
    fi;
}

showHelp() {
    echo "humble-lumpia - CLI for installing versions of Glorious Eggroll's custom Proton";
    echo "";
    echo "USAGE:"
    echo "";
    echo "humble-lumpia update";
    echo "humble-lumpia ls [--installed]"
    echo "humble-lumpia install <VERSION>";
    echo "humble-lumpia rm <VERSION>";
    echo "";
    echo "COMMANDS:";
    echo "";
    echo "update   Updates the list of available versions to install";
    echo "ls       Lists the versions that are available to install, or the currently installed versions if the '--installed' flag is provided.";
    echo "install  Installs a version of proton-custom-ge where VERSION is a value reported by humble-lumpia ls or 'latest'";
    echo "rm       Removes a currently installed version where VERSION is a value reported by ls --installed";
    echo "help     Shows this help information";
}

case $1 in
    "update")
        updateReleaseData;
    ;;
    "ls")
        if test "$2" = "--installed"; then
            lsInstalled
        else
            lsReleases
        fi;
    ;;
    "install")
        installRelease "$2"
    ;;
    "rm")
        removeRelease "$2"
    ;;
    "help"|"--help")
        showHelp;
    ;;
    *)
        echo "Unrecognized command '$1'";
        showHelp;
    ;;
esac
